package cs3500.animator.provider.model;


import cs3500.model.animation.AnimationTuple;
import cs3500.model.shape.Shape;
import cs3500.model.shape.ShapeTuple;
import java.awt.Shape;
import java.util.List;

//CHANGES FROM HOMEWORK 6: Added methods to add, remove, and update keyframes on shapes

/**
 * Represents the Animator Model.
 */
public interface ExcelAnimatorModel {

  /**
   * Generates the state of all animations in this model, represented as an ArrayList of all the
   * shapes generated by each animation at the given absolute tick.
   *
   * @param n the absolute tick at which each animation is to be seen
   * @return an ArrayList containing the shapes generated by each animation
   */
  public List<Shape> getAnimationState(int n);

  /**
   * Adds the given animation to the list of animations contained within this model.
   *
   * @param animT the Animation Tuple object to be added
   * @return the model after mutation so these statements can be strung together
   */
  public ExcelAnimatorModel addAnimation(AnimationTuple animT);

  /**
   * Removes the given animation From the list of animations contained within this model.
   * Does not mutate the list if tha Animation Tuple is not found.
   *
   * @param animT the Animation Tuple object to be removed
   * @return the model after mutation so these statements can be strung together
   */
  public ExcelAnimatorModel removeAnimation(AnimationTuple animT);

  /**
   * Produces a verbose description for what the overall animation will look like, describing the
   * motion of each shape.
   * Will follow this format:
   * "Animation (number): - startTick Shape_type x_location y_location width height red green blue |
   * endTick Shape_type x_location y_location width height red green blue
   * With a description of each distinct animation on its own line.
   *
   * @return a string containing such a description
   */
  public String textView();

  /**
   * Gets the coordinates of the origin and the values of width/height for the canvas in the order
   * x, y, width, height.
   *
   * @return The canvas size and origin of this Model
   */
  public int[] getBounds();

  /**
   * Gets the list containing all declared shapes in this model.
   *
   * @return a list of all shapes in this model
   */
  public List<ShapeTuple> getShapes();


  /**
   * Gets a list containing all motions of the shape with the given name.
   *
   * @param name the name the user declared the shape with
   * @return a list of AnimationTuples which all reference the shape associated with given name
   */
  public List<AnimationTuple> getMotionsOfShape(String name);

  /**
   * Finds the highest tick value across all Animations in this model.
   *
   * @return the greatest tick in this model
   */
  public int getLastTick();

  /**
   * Adds given shape to this model.
   *
   * @param shape the shape to be added to this model
   */
  public void addShape(ShapeTuple shape);

  /**
   * Removes shape with given name from this model.
   *
   * @param name the name of the shape to be removed from this model
   */
  public void removeShape(String name);

  /**
   * Updates the keyframe at the given tick (in absolute time) of the Animation associated with the
   * given ShapeTuple.
   *
   * @param shape the shape being modified in this motion
   * @param tick the tick at which the keyframe occurs
   */
  public void updateKeyframeOfAnimation(ShapeTuple shape, int tick);
}
